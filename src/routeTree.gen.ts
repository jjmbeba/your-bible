/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteImport } from './routes/search'
import { Route as RoadmapRouteImport } from './routes/roadmap'
import { Route as BibleRouteImport } from './routes/bible'
import { Route as AuthedRouteRouteImport } from './routes/_authed/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthedCollectionsIndexRouteImport } from './routes/_authed/collections/index'
import { Route as AuthedCollectionsCollectionIdRouteImport } from './routes/_authed/collections/$collectionId'

const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const RoadmapRoute = RoadmapRouteImport.update({
  id: '/roadmap',
  path: '/roadmap',
  getParentRoute: () => rootRouteImport,
} as any)
const BibleRoute = BibleRouteImport.update({
  id: '/bible',
  path: '/bible',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRouteRoute = AuthedRouteRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedCollectionsIndexRoute = AuthedCollectionsIndexRouteImport.update({
  id: '/collections/',
  path: '/collections/',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const AuthedCollectionsCollectionIdRoute =
  AuthedCollectionsCollectionIdRouteImport.update({
    id: '/collections/$collectionId',
    path: '/collections/$collectionId',
    getParentRoute: () => AuthedRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthedRouteRouteWithChildren
  '/bible': typeof BibleRoute
  '/roadmap': typeof RoadmapRoute
  '/search': typeof SearchRoute
  '/collections/$collectionId': typeof AuthedCollectionsCollectionIdRoute
  '/collections': typeof AuthedCollectionsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthedRouteRouteWithChildren
  '/bible': typeof BibleRoute
  '/roadmap': typeof RoadmapRoute
  '/search': typeof SearchRoute
  '/collections/$collectionId': typeof AuthedCollectionsCollectionIdRoute
  '/collections': typeof AuthedCollectionsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteRouteWithChildren
  '/bible': typeof BibleRoute
  '/roadmap': typeof RoadmapRoute
  '/search': typeof SearchRoute
  '/_authed/collections/$collectionId': typeof AuthedCollectionsCollectionIdRoute
  '/_authed/collections/': typeof AuthedCollectionsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/bible'
    | '/roadmap'
    | '/search'
    | '/collections/$collectionId'
    | '/collections'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/bible'
    | '/roadmap'
    | '/search'
    | '/collections/$collectionId'
    | '/collections'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/bible'
    | '/roadmap'
    | '/search'
    | '/_authed/collections/$collectionId'
    | '/_authed/collections/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRouteRoute: typeof AuthedRouteRouteWithChildren
  BibleRoute: typeof BibleRoute
  RoadmapRoute: typeof RoadmapRoute
  SearchRoute: typeof SearchRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/roadmap': {
      id: '/roadmap'
      path: '/roadmap'
      fullPath: '/roadmap'
      preLoaderRoute: typeof RoadmapRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bible': {
      id: '/bible'
      path: '/bible'
      fullPath: '/bible'
      preLoaderRoute: typeof BibleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/collections/': {
      id: '/_authed/collections/'
      path: '/collections'
      fullPath: '/collections'
      preLoaderRoute: typeof AuthedCollectionsIndexRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_authed/collections/$collectionId': {
      id: '/_authed/collections/$collectionId'
      path: '/collections/$collectionId'
      fullPath: '/collections/$collectionId'
      preLoaderRoute: typeof AuthedCollectionsCollectionIdRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
  }
}

interface AuthedRouteRouteChildren {
  AuthedCollectionsCollectionIdRoute: typeof AuthedCollectionsCollectionIdRoute
  AuthedCollectionsIndexRoute: typeof AuthedCollectionsIndexRoute
}

const AuthedRouteRouteChildren: AuthedRouteRouteChildren = {
  AuthedCollectionsCollectionIdRoute: AuthedCollectionsCollectionIdRoute,
  AuthedCollectionsIndexRoute: AuthedCollectionsIndexRoute,
}

const AuthedRouteRouteWithChildren = AuthedRouteRoute._addFileChildren(
  AuthedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRouteRoute: AuthedRouteRouteWithChildren,
  BibleRoute: BibleRoute,
  RoadmapRoute: RoadmapRoute,
  SearchRoute: SearchRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
